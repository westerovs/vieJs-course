const shpora = {
    ___Введение___:
    `--------------------------------------------------------------------`,

    'v-bind':
        `Атрибут называется директивой. Директивы имеют префикс v-, указывающий на их особую природу. Они добавляют к отображаемому DOM особое реактивное поведение, управляемое Vue.`,
    'v-if':
        `атрибут-условие`,
    'v-for':
        `для отображения списков, используя данные из массива`,
    'v-on':
        `для отслеживания событий, указав метод-обработчик`,
    'v-model':
        `для связывания элементов форм и состояния приложения:`,

    компонент:
        `Во Vue компонент — это, по сути, экземпляр Vue с предустановленными опциями.`,


    ___Создание_экземпляра_Vue___:
    `--------------------------------------------------------------------`,

    Создание_экземпляра_Vue:
        `Каждое приложение начинается с создания нового экземпляра Vue с помощью функции Vue.
        const vm = new Vue({
            // опции
          })
        Хоть Vue и не реализует паттерн MVVM в полной мере, архитектура фреймворка им во многом вдохновлена. Поэтому переменную с экземпляром Vue традиционно именуют vm (сокращённо от ViewModel).
        Все компоненты Vue также являются экземплярами Vue и поэтому принимают такой же объект опций (за исключением нескольких специфичных для корневого).`,
    $:
        `Служебные св-ва и методы. Их имена начинаются с префикса $, чтобы отличаться от пользовательских свойств.`,
    Хуки_жизненного_цикла:
        `Каждый экземпляр Vue при создании проходит через последовательность шагов инициализации — например, настраивает наблюдение за данными, компилирует шаблон, монтирует экземпляр в DOM, обновляет DOM при изменении данных. Между этими шагами вызываются функции, называемые хуками жизненного цикла, с помощью которых можно выполнять свой код на определённых этапах.`,
}
